# Задача 4: Генератор конфигурационного файла

import json
import sys

def generate_config(среда):
    """Генерирует конфигурацию для указанной среды"""
    
    # Базовые настройки для всех сред
    конфиг = {
        "название_приложения": "Мое Крутое Приложение",
        "версия": "1.0.0",
        "среда": среда
    }
    
    # Настройки в зависимости от среды
    if среда == "разработка":
        конфиг.update({
            "отладка": True,
            "уровень_логов": "подробный",
            "база_данных": "sqlite:///приложение.db",
            "порт": 8000,
            "хост": "localhost"
        })
    elif среда == "продакшн":
        конфиг.update({
            "отладка": False,
            "уровень_логов": "ошибки",
            "база_данных": "postgresql://пользователь:пароль@localhost/приложение",
            "порт": 80,
            "хост": "0.0.0.0"
        })
    elif среда == "тестирование":
        конфиг.update({
            "отладка": True,
            "уровень_логов": "информация",
            "база_данных": "sqlite:///:memory:",
            "порт": 8080,
            "хост": "localhost"
        })
    else:
        print(f"Неизвестная среда: {среда}")
        print("Доступные среды: разработка, продакшн, тестирование")
        return None
    
    return конфиг

def main():
    """Главная функция"""
    
    # Проверяем аргументы командной строки
    if len(sys.argv) != 2:
        print("Использование: python task4_config.py <среда>")
        print("Доступные среды: разработка, продакшн, тестирование")
        return
    
    среда = sys.argv[1]
    
    # Генерируем конфигурацию
    конфиг = generate_config(среда)
    if конфиг is None:
        return
    
    # Сохраняем в файл
    имя_файла = f"конфиг_{среда}.json"
    with open(имя_файла, 'w', encoding='utf-8') as f:
        json.dump(конфиг, f, ensure_ascii=False, indent=2)
    
    print(f"Конфигурация для среды '{среда}' сохранена в файл '{имя_файла}'")
    print("\nСодержимое файла:")
    print(json.dumps(конфиг, ensure_ascii=False, indent=2))

# Демонстрация работы для всех сред
def demo():
    """Демонстрация генерации конфигураций для всех сред"""
    
    среды = ["разработка", "продакшн", "тестирование"]
    
    print("=== ДЕМОНСТРАЦИЯ ГЕНЕРАТОРА КОНФИГУРАЦИЙ ===\n")
    
    for среда in среды:
        print(f"--- Конфигурация для среды: {среда} ---")
        конфиг = generate_config(среда)
        
        # Сохраняем файл
        имя_файла = f"конфиг_{среда}.json"
        with open(имя_файла, 'w', encoding='utf-8') as f:
            json.dump(конфиг, f, ensure_ascii=False, indent=2)
        
        print(json.dumps(конфиг, ensure_ascii=False, indent=2))
        print(f"Сохранено в: {имя_файла}\n")

if __name__ == "__main__":
    # Если запущено без аргументов, показываем демо
    if len(sys.argv) == 1:
        demo()
    else:
        main()

# Примеры запуска:
# python task4_config.py разработка
# python task4_config.py продакшн
# python task4_config.py тестирование